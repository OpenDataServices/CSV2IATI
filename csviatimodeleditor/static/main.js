// Generated by CoffeeScript 1.9.3
var DEFAULT_FIELD_SETUP, DEFAULT_MODEL, DIMENSION_META, Delegator, DimensionWidget, DimensionsWidget, FIELDS_META, ModelEditor, SAMPLE_DATA, UniqueKeyWidget, Widget, key, ref, util, value,
  slice = [].slice,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Delegator = (function() {
  Delegator.prototype.events = {};

  Delegator.prototype.options = {};

  Delegator.prototype.element = null;

  function Delegator(element, options) {
    this.options = $.extend(true, {}, this.options, options);
    this.element = $(element);
    this.on = this.subscribe;
    this.addEvents();
  }

  Delegator.prototype.addEvents = function() {
    var event, functionName, i, ref, ref1, results, sel, selector;
    ref = this.events;
    results = [];
    for (sel in ref) {
      functionName = ref[sel];
      ref1 = sel.split(' '), selector = 2 <= ref1.length ? slice.call(ref1, 0, i = ref1.length - 1) : (i = 0, []), event = ref1[i++];
      results.push(this.addEvent(selector.join(' '), event, functionName));
    }
    return results;
  };

  Delegator.prototype.addEvent = function(bindTo, event, functionName) {
    var closure, isBlankSelector;
    closure = (function(_this) {
      return function() {
        return _this[functionName].apply(_this, arguments);
      };
    })(this);
    isBlankSelector = typeof bindTo === 'string' && bindTo.replace(/\s+/g, '') === '';
    if (isBlankSelector) {
      bindTo = this.element;
    }
    if (typeof bindTo === 'string') {
      this.element.delegate(bindTo, event, closure);
    } else {
      if (this.isCustomEvent(event)) {
        this.subscribe(event, closure);
      } else {
        $(bindTo).bind(event, closure);
      }
    }
    return this;
  };

  Delegator.prototype.isCustomEvent = function(event) {
    var natives;
    natives = "blur focus focusin focusout load resize scroll unload click dblclick\nmousedown mouseup mousemove mouseover mouseout mouseenter mouseleave\nchange select submit keydown keypress keyup error".split(/[^a-z]+/);
    event = event.split('.')[0];
    return $.inArray(event, natives) === -1;
  };

  Delegator.prototype.publish = function() {
    this.element.triggerHandler.apply(this.element, arguments);
    return this;
  };

  Delegator.prototype.subscribe = function(event, callback) {
    var closure;
    closure = function() {
      return callback.apply(this, [].slice.call(arguments, 1));
    };
    closure.guid = callback.guid = ($.guid += 1);
    this.element.bind(event, closure);
    return this;
  };

  Delegator.prototype.unsubscribe = function() {
    this.element.unbind.apply(this.element, arguments);
    return this;
  };

  return Delegator;

})();

$.plugin = function(name, object) {
  return jQuery.fn[name] = function(options) {
    var args;
    args = Array.prototype.slice.call(arguments, 1);
    return this.each(function() {
      var instance;
      instance = $.data(this, name);
      if (instance) {
        return options && instance[options].apply(instance, args);
      } else {
        instance = new object(this, options);
        return $.data(this, name, instance);
      }
    });
  };
};

$.a2o = function(ary) {
  var obj, walk;
  obj = {};
  walk = function(o, path, value) {
    var key;
    key = path[0];
    if (path.length === 2 && path[1] === '') {
      if ($.type(o[key]) !== 'array') {
        o[key] = [];
      }
      return o[key].push(value);
    } else if (path.length === 1) {
      return o[key] = value;
    } else {
      if ($.type(o[key]) !== 'object') {
        o[key] = {};
      }
      return walk(o[key], path.slice(1), value);
    }
  };
  $.each(ary, function() {
    var p, path;
    path = this.name.split('[');
    path = [path[0]].concat(slice.call((function() {
        var i, len, ref, results;
        ref = path.slice(1);
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          p = ref[i];
          results.push(p.slice(0, -1));
        }
        return results;
      })()));
    return walk(obj, path, this.value);
  });
  return obj;
};

$.fn.serializeObject = function() {
  var ary;
  ary = this.serializeArray();
  return $.a2o(ary);
};

DEFAULT_FIELD_SETUP = {
  'iati-identifier': {
    datatype: 'compound',
    label: 'Iati Identifier',
    fields: {
      'text': {
        datatype: 'column',
        required: false
      }
    }
  },
  'other-identifier': {
    datatype: 'compound',
    label: 'Other Identifier',
    fields: {
      'ref': {
        datatype: 'column',
        required: true
      },
      'type': {
        datatype: 'column',
        required: true
      },
      'owner-org': {
        datatype: 'compound',
        label: 'Owner Org',
        fields: {
          'ref': {
            datatype: 'column',
            required: false
          },
          'narrative': {
            datatype: 'compound',
            label: 'Narrative',
            fields: {
              'xml:lang': {
                datatype: 'column',
                required: false
              },
              'text': {
                datatype: 'column',
                required: false
              }
            }
          }
        }
      }
    }
  },
  'title': {
    datatype: 'compound',
    label: 'Title',
    fields: {
      'narrative': {
        datatype: 'compound',
        label: 'Narrative',
        fields: {
          'text': {
            datatype: 'column',
            required: false
          }
        }
      }
    }
  },
  'description': {
    datatype: 'compound',
    label: 'Description',
    fields: {
      'type': {
        datatype: 'column',
        required: false
      },
      'narrative': {
        datatype: 'compound',
        label: 'Narrative',
        fields: {
          'xml:lang': {
            datatype: 'column',
            required: false
          },
          'text': {
            datatype: 'column',
            required: false
          }
        }
      }
    }
  },
  'activity-status': {
    datatype: 'compound',
    label: 'Activity Status',
    fields: {
      'code': {
        datatype: 'column',
        required: true
      }
    }
  },
  'activity-date': {
    datatype: 'compound',
    label: 'Activity Date',
    fields: {
      'type': {
        datatype: 'column',
        required: true
      },
      'iso-date': {
        datatype: 'column',
        required: true
      },
      'narrative': {
        datatype: 'compound',
        label: 'Narrative',
        fields: {
          'xml:lang': {
            datatype: 'column',
            required: false
          },
          'text': {
            datatype: 'column',
            required: false
          }
        }
      }
    }
  },
  'contact-info': {
    datatype: 'compound',
    label: 'Contact Info',
    fields: {
      'type': {
        datatype: 'column',
        required: false
      },
      'organisation': {
        datatype: 'compound',
        label: 'Organisation',
        fields: {
          'narrative': {
            datatype: 'compound',
            label: 'Narrative',
            fields: {
              'text': {
                datatype: 'column',
                required: false
              }
            }
          }
        }
      },
      'department': {
        datatype: 'compound',
        label: 'Department',
        fields: {
          'narrative': {
            datatype: 'compound',
            label: 'Narrative',
            fields: {
              'text': {
                datatype: 'column',
                required: false
              }
            }
          }
        }
      },
      'person-name': {
        datatype: 'compound',
        label: 'Person Name',
        fields: {
          'narrative': {
            datatype: 'compound',
            label: 'Narrative',
            fields: {
              'text': {
                datatype: 'column',
                required: false
              }
            }
          }
        }
      },
      'job-title': {
        datatype: 'compound',
        label: 'Job Title',
        fields: {
          'narrative': {
            datatype: 'compound',
            label: 'Narrative',
            fields: {
              'text': {
                datatype: 'column',
                required: false
              }
            }
          }
        }
      },
      'telephone': {
        datatype: 'compound',
        label: 'Telephone',
        fields: {
          'text': {
            datatype: 'column',
            required: false
          }
        }
      },
      'email': {
        datatype: 'compound',
        label: 'Email',
        fields: {
          'text': {
            datatype: 'column',
            required: false
          }
        }
      },
      'website': {
        datatype: 'compound',
        label: 'Website',
        fields: {
          'text': {
            datatype: 'column',
            required: false
          }
        }
      },
      'mailing-address': {
        datatype: 'compound',
        label: 'Mailing Address',
        fields: {
          'narrative': {
            datatype: 'compound',
            label: 'Narrative',
            fields: {
              'text': {
                datatype: 'column',
                required: false
              }
            }
          }
        }
      }
    }
  },
  'participating-org': {
    datatype: 'compound',
    label: 'Participating Org',
    fields: {
      'ref': {
        datatype: 'column',
        required: false
      },
      'type': {
        datatype: 'column',
        required: false
      },
      'role': {
        datatype: 'column',
        required: true
      },
      'activity-id': {
        datatype: 'column',
        required: false
      },
      'narrative': {
        datatype: 'compound',
        label: 'Narrative',
        fields: {
          'xml:lang': {
            datatype: 'column',
            required: false
          },
          'text': {
            datatype: 'column',
            required: false
          }
        }
      }
    }
  },
  'activity-scope': {
    datatype: 'compound',
    label: 'Activity Scope',
    fields: {
      'code': {
        datatype: 'column',
        required: true
      }
    }
  },
  'recipient-country': {
    datatype: 'compound',
    label: 'Recipient Country',
    fields: {
      'code': {
        datatype: 'column',
        required: true
      },
      'percentage': {
        datatype: 'column',
        required: false
      },
      'narrative': {
        datatype: 'compound',
        label: 'Narrative',
        fields: {
          'xml:lang': {
            datatype: 'column',
            required: false
          },
          'text': {
            datatype: 'column',
            required: false
          }
        }
      }
    }
  },
  'recipient-region': {
    datatype: 'compound',
    label: 'Recipient Region',
    fields: {
      'code': {
        datatype: 'column',
        required: true
      },
      'vocabulary': {
        datatype: 'column',
        required: false
      },
      'vocabulary-uri': {
        datatype: 'column',
        required: false
      },
      'percentage': {
        datatype: 'column',
        required: false
      },
      'narrative': {
        datatype: 'compound',
        label: 'Narrative',
        fields: {
          'xml:lang': {
            datatype: 'column',
            required: false
          },
          'text': {
            datatype: 'column',
            required: false
          }
        }
      }
    }
  },
  'location': {
    datatype: 'compound',
    label: 'Location',
    fields: {
      'ref': {
        datatype: 'column',
        required: false
      },
      'location-reach': {
        datatype: 'compound',
        label: 'Location Reach',
        fields: {
          'code': {
            datatype: 'column',
            required: true
          }
        }
      },
      'location-id': {
        datatype: 'compound',
        label: 'Location Id',
        fields: {
          'code': {
            datatype: 'column',
            required: true
          },
          'vocabulary': {
            datatype: 'column',
            required: true
          }
        }
      },
      'name': {
        datatype: 'compound',
        label: 'Name',
        fields: {
          'narrative': {
            datatype: 'compound',
            label: 'Narrative',
            fields: {
              'text': {
                datatype: 'column',
                required: false
              }
            }
          }
        }
      },
      'description': {
        datatype: 'compound',
        label: 'Description',
        fields: {
          'narrative': {
            datatype: 'compound',
            label: 'Narrative',
            fields: {
              'text': {
                datatype: 'column',
                required: false
              }
            }
          }
        }
      },
      'activity-description': {
        datatype: 'compound',
        label: 'Activity Description',
        fields: {
          'narrative': {
            datatype: 'compound',
            label: 'Narrative',
            fields: {
              'text': {
                datatype: 'column',
                required: false
              }
            }
          }
        }
      },
      'administrative': {
        datatype: 'compound',
        label: 'Administrative',
        fields: {
          'code': {
            datatype: 'column',
            required: true
          },
          'vocabulary': {
            datatype: 'column',
            required: true
          },
          'level': {
            datatype: 'column',
            required: false
          }
        }
      },
      'point': {
        datatype: 'compound',
        label: 'Point',
        fields: {
          'srsName': {
            datatype: 'column',
            required: true
          },
          'pos': {
            datatype: 'compound',
            label: 'Pos',
            fields: {
              'text': {
                datatype: 'column',
                required: false
              }
            }
          }
        }
      },
      'exactness': {
        datatype: 'compound',
        label: 'Exactness',
        fields: {
          'code': {
            datatype: 'column',
            required: true
          }
        }
      },
      'location-class': {
        datatype: 'compound',
        label: 'Location Class',
        fields: {
          'code': {
            datatype: 'column',
            required: true
          }
        }
      },
      'feature-designation': {
        datatype: 'compound',
        label: 'Feature Designation',
        fields: {
          'code': {
            datatype: 'column',
            required: true
          }
        }
      }
    }
  },
  'sector': {
    datatype: 'compound',
    label: 'Sector',
    fields: {
      'vocabulary': {
        datatype: 'column',
        required: false
      },
      'vocabulary-uri': {
        datatype: 'column',
        required: false
      },
      'code': {
        datatype: 'column',
        required: true
      },
      'percentage': {
        datatype: 'column',
        required: false
      },
      'narrative': {
        datatype: 'compound',
        label: 'Narrative',
        fields: {
          'xml:lang': {
            datatype: 'column',
            required: false
          },
          'text': {
            datatype: 'column',
            required: false
          }
        }
      }
    }
  },
  'country-budget-items': {
    datatype: 'compound',
    label: 'Country Budget Items',
    fields: {
      'vocabulary': {
        datatype: 'column',
        required: true
      },
      'budget-item': {
        datatype: 'compound',
        label: 'Budget Item',
        fields: {
          'code': {
            datatype: 'column',
            required: true
          },
          'percentage': {
            datatype: 'column',
            required: false
          },
          'description': {
            datatype: 'compound',
            label: 'Description',
            fields: {
              'narrative': {
                datatype: 'compound',
                label: 'Narrative',
                fields: {
                  'text': {
                    datatype: 'column',
                    required: false
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  'policy-marker': {
    datatype: 'compound',
    label: 'Policy Marker',
    fields: {
      'vocabulary': {
        datatype: 'column',
        required: false
      },
      'vocabulary-uri': {
        datatype: 'column',
        required: false
      },
      'code': {
        datatype: 'column',
        required: true
      },
      'significance': {
        datatype: 'column',
        required: false
      },
      'narrative': {
        datatype: 'compound',
        label: 'Narrative',
        fields: {
          'xml:lang': {
            datatype: 'column',
            required: false
          },
          'text': {
            datatype: 'column',
            required: false
          }
        }
      }
    }
  },
  'collaboration-type': {
    datatype: 'compound',
    label: 'Collaboration Type',
    fields: {
      'code': {
        datatype: 'column',
        required: true
      }
    }
  },
  'default-finance-type': {
    datatype: 'compound',
    label: 'Default Finance Type',
    fields: {
      'code': {
        datatype: 'column',
        required: true
      }
    }
  },
  'default-flow-type': {
    datatype: 'compound',
    label: 'Default Flow Type',
    fields: {
      'code': {
        datatype: 'column',
        required: true
      }
    }
  },
  'default-aid-type': {
    datatype: 'compound',
    label: 'Default Aid Type',
    fields: {
      'code': {
        datatype: 'column',
        required: true
      }
    }
  },
  'default-tied-status': {
    datatype: 'compound',
    label: 'Default Tied Status',
    fields: {
      'code': {
        datatype: 'column',
        required: true
      }
    }
  },
  'budget': {
    datatype: 'compound',
    label: 'Budget',
    fields: {
      'type': {
        datatype: 'column',
        required: false
      },
      'status': {
        datatype: 'column',
        required: false
      },
      'period-start': {
        datatype: 'compound',
        label: 'Period Start',
        fields: {
          'iso-date': {
            datatype: 'column',
            required: true
          }
        }
      },
      'period-end': {
        datatype: 'compound',
        label: 'Period End',
        fields: {
          'iso-date': {
            datatype: 'column',
            required: true
          }
        }
      },
      'value': {
        datatype: 'compound',
        label: 'Value',
        fields: {
          'text': {
            datatype: 'column',
            required: false
          },
          'currency': {
            datatype: 'column',
            required: false
          },
          'value-date': {
            datatype: 'column',
            required: false
          }
        }
      }
    }
  },
  'planned-disbursement': {
    datatype: 'compound',
    label: 'Planned Disbursement',
    fields: {
      'type': {
        datatype: 'column',
        required: false
      },
      'period-start': {
        datatype: 'compound',
        label: 'Period Start',
        fields: {
          'iso-date': {
            datatype: 'column',
            required: true
          }
        }
      },
      'period-end': {
        datatype: 'compound',
        label: 'Period End',
        fields: {
          'iso-date': {
            datatype: 'column',
            required: true
          }
        }
      },
      'value': {
        datatype: 'compound',
        label: 'Value',
        fields: {
          'text': {
            datatype: 'column',
            required: false
          },
          'currency': {
            datatype: 'column',
            required: false
          },
          'value-date': {
            datatype: 'column',
            required: false
          }
        }
      },
      'provider-org': {
        datatype: 'compound',
        label: 'Provider Org',
        fields: {
          'ref': {
            datatype: 'column',
            required: false
          },
          'provider-activity-id': {
            datatype: 'column',
            required: false
          },
          'type': {
            datatype: 'column',
            required: false
          },
          'narrative': {
            datatype: 'compound',
            label: 'Narrative',
            fields: {
              'xml:lang': {
                datatype: 'column',
                required: false
              },
              'text': {
                datatype: 'column',
                required: false
              }
            }
          }
        }
      },
      'receiver-org': {
        datatype: 'compound',
        label: 'Receiver Org',
        fields: {
          'ref': {
            datatype: 'column',
            required: false
          },
          'receiver-activity-id': {
            datatype: 'column',
            required: false
          },
          'type': {
            datatype: 'column',
            required: false
          },
          'narrative': {
            datatype: 'compound',
            label: 'Narrative',
            fields: {
              'xml:lang': {
                datatype: 'column',
                required: false
              },
              'text': {
                datatype: 'column',
                required: false
              }
            }
          }
        }
      }
    }
  },
  'capital-spend': {
    datatype: 'compound',
    label: 'Capital Spend',
    fields: {
      'percentage': {
        datatype: 'column',
        required: true
      }
    }
  },
  'transaction': {
    datatype: 'compound',
    label: 'Transaction',
    fields: {
      'ref': {
        datatype: 'column',
        required: false
      },
      'humanitarian': {
        datatype: 'column',
        required: false
      },
      'transaction-type': {
        datatype: 'compound',
        label: 'Transaction Type',
        fields: {
          'code': {
            datatype: 'column',
            required: true
          }
        }
      },
      'transaction-date': {
        datatype: 'compound',
        label: 'Transaction Date',
        fields: {
          'iso-date': {
            datatype: 'column',
            required: true
          }
        }
      },
      'value': {
        datatype: 'compound',
        label: 'Value',
        fields: {
          'text': {
            datatype: 'column',
            required: false
          },
          'currency': {
            datatype: 'column',
            required: false
          },
          'value-date': {
            datatype: 'column',
            required: false
          }
        }
      },
      'description': {
        datatype: 'compound',
        label: 'Description',
        fields: {
          'narrative': {
            datatype: 'compound',
            label: 'Narrative',
            fields: {
              'text': {
                datatype: 'column',
                required: false
              }
            }
          }
        }
      },
      'provider-org': {
        datatype: 'compound',
        label: 'Provider Org',
        fields: {
          'ref': {
            datatype: 'column',
            required: false
          },
          'provider-activity-id': {
            datatype: 'column',
            required: false
          },
          'type': {
            datatype: 'column',
            required: false
          },
          'narrative': {
            datatype: 'compound',
            label: 'Narrative',
            fields: {
              'xml:lang': {
                datatype: 'column',
                required: false
              },
              'text': {
                datatype: 'column',
                required: false
              }
            }
          }
        }
      },
      'receiver-org': {
        datatype: 'compound',
        label: 'Receiver Org',
        fields: {
          'ref': {
            datatype: 'column',
            required: false
          },
          'receiver-activity-id': {
            datatype: 'column',
            required: false
          },
          'type': {
            datatype: 'column',
            required: false
          },
          'narrative': {
            datatype: 'compound',
            label: 'Narrative',
            fields: {
              'xml:lang': {
                datatype: 'column',
                required: false
              },
              'text': {
                datatype: 'column',
                required: false
              }
            }
          }
        }
      },
      'disbursement-channel': {
        datatype: 'compound',
        label: 'Disbursement Channel',
        fields: {
          'code': {
            datatype: 'column',
            required: true
          }
        }
      },
      'sector': {
        datatype: 'compound',
        label: 'Sector',
        fields: {
          'vocabulary': {
            datatype: 'column',
            required: false
          },
          'vocabulary-uri': {
            datatype: 'column',
            required: false
          },
          'code': {
            datatype: 'column',
            required: true
          },
          'narrative': {
            datatype: 'compound',
            label: 'Narrative',
            fields: {
              'xml:lang': {
                datatype: 'column',
                required: false
              },
              'text': {
                datatype: 'column',
                required: false
              }
            }
          }
        }
      },
      'recipient-country': {
        datatype: 'compound',
        label: 'Recipient Country',
        fields: {
          'code': {
            datatype: 'column',
            required: true
          },
          'narrative': {
            datatype: 'compound',
            label: 'Narrative',
            fields: {
              'xml:lang': {
                datatype: 'column',
                required: false
              },
              'text': {
                datatype: 'column',
                required: false
              }
            }
          }
        }
      },
      'recipient-region': {
        datatype: 'compound',
        label: 'Recipient Region',
        fields: {
          'code': {
            datatype: 'column',
            required: true
          },
          'vocabulary': {
            datatype: 'column',
            required: false
          },
          'vocabulary-uri': {
            datatype: 'column',
            required: false
          },
          'narrative': {
            datatype: 'compound',
            label: 'Narrative',
            fields: {
              'xml:lang': {
                datatype: 'column',
                required: false
              },
              'text': {
                datatype: 'column',
                required: false
              }
            }
          }
        }
      },
      'flow-type': {
        datatype: 'compound',
        label: 'Flow Type',
        fields: {
          'code': {
            datatype: 'column',
            required: true
          }
        }
      },
      'finance-type': {
        datatype: 'compound',
        label: 'Finance Type',
        fields: {
          'code': {
            datatype: 'column',
            required: true
          }
        }
      },
      'aid-type': {
        datatype: 'compound',
        label: 'Aid Type',
        fields: {
          'code': {
            datatype: 'column',
            required: true
          }
        }
      },
      'tied-status': {
        datatype: 'compound',
        label: 'Tied Status',
        fields: {
          'code': {
            datatype: 'column',
            required: true
          }
        }
      }
    }
  },
  'document-link': {
    datatype: 'compound',
    label: 'Document Link',
    fields: {
      'url': {
        datatype: 'column',
        required: true
      },
      'format': {
        datatype: 'column',
        required: true
      },
      'title': {
        datatype: 'compound',
        label: 'Title',
        fields: {
          'narrative': {
            datatype: 'compound',
            label: 'Narrative',
            fields: {
              'text': {
                datatype: 'column',
                required: false
              }
            }
          }
        }
      },
      'category': {
        datatype: 'compound',
        label: 'Category',
        fields: {
          'code': {
            datatype: 'column',
            required: true
          }
        }
      },
      'language': {
        datatype: 'compound',
        label: 'Language',
        fields: {
          'code': {
            datatype: 'column',
            required: true
          }
        }
      },
      'document-date': {
        datatype: 'compound',
        label: 'Document Date',
        fields: {
          'iso-date': {
            datatype: 'column',
            required: true
          }
        }
      }
    }
  },
  'related-activity': {
    datatype: 'compound',
    label: 'Related Activity',
    fields: {
      'ref': {
        datatype: 'column',
        required: true
      },
      'type': {
        datatype: 'column',
        required: true
      }
    }
  },
  'conditions': {
    datatype: 'compound',
    label: 'Conditions',
    fields: {
      'attached': {
        datatype: 'column',
        required: true
      },
      'condition': {
        datatype: 'compound',
        label: 'Condition',
        fields: {
          'type': {
            datatype: 'column',
            required: true
          },
          'narrative': {
            datatype: 'compound',
            label: 'Narrative',
            fields: {
              'xml:lang': {
                datatype: 'column',
                required: false
              },
              'text': {
                datatype: 'column',
                required: false
              }
            }
          }
        }
      }
    }
  },
  'result': {
    datatype: 'compound',
    label: 'Result',
    fields: {
      'type': {
        datatype: 'column',
        required: true
      },
      'aggregation-status': {
        datatype: 'column',
        required: false
      },
      'title': {
        datatype: 'compound',
        label: 'Title',
        fields: {
          'narrative': {
            datatype: 'compound',
            label: 'Narrative',
            fields: {
              'text': {
                datatype: 'column',
                required: false
              }
            }
          }
        }
      },
      'description': {
        datatype: 'compound',
        label: 'Description',
        fields: {
          'type': {
            datatype: 'column',
            required: false
          },
          'narrative': {
            datatype: 'compound',
            label: 'Narrative',
            fields: {
              'xml:lang': {
                datatype: 'column',
                required: false
              },
              'text': {
                datatype: 'column',
                required: false
              }
            }
          }
        }
      },
      'indicator': {
        datatype: 'compound',
        label: 'Indicator',
        fields: {
          'measure': {
            datatype: 'column',
            required: true
          },
          'ascending': {
            datatype: 'column',
            required: false
          },
          'title': {
            datatype: 'compound',
            label: 'Title',
            fields: {
              'narrative': {
                datatype: 'compound',
                label: 'Narrative',
                fields: {
                  'text': {
                    datatype: 'column',
                    required: false
                  }
                }
              }
            }
          },
          'description': {
            datatype: 'compound',
            label: 'Description',
            fields: {
              'type': {
                datatype: 'column',
                required: false
              },
              'narrative': {
                datatype: 'compound',
                label: 'Narrative',
                fields: {
                  'xml:lang': {
                    datatype: 'column',
                    required: false
                  },
                  'text': {
                    datatype: 'column',
                    required: false
                  }
                }
              }
            }
          },
          'reference': {
            datatype: 'compound',
            label: 'Reference',
            fields: {
              'vocabulary': {
                datatype: 'column',
                required: true
              },
              'code': {
                datatype: 'column',
                required: true
              },
              'indicator-uri': {
                datatype: 'column',
                required: false
              }
            }
          },
          'baseline': {
            datatype: 'compound',
            label: 'Baseline',
            fields: {
              'year': {
                datatype: 'column',
                required: true
              },
              'value': {
                datatype: 'column',
                required: true
              },
              'comment': {
                datatype: 'compound',
                label: 'Comment',
                fields: {
                  'narrative': {
                    datatype: 'compound',
                    label: 'Narrative',
                    fields: {
                      'text': {
                        datatype: 'column',
                        required: false
                      }
                    }
                  }
                }
              }
            }
          },
          'period': {
            datatype: 'compound',
            label: 'Period',
            fields: {
              'period-start': {
                datatype: 'compound',
                label: 'Period Start',
                fields: {
                  'iso-date': {
                    datatype: 'column',
                    required: true
                  }
                }
              },
              'period-end': {
                datatype: 'compound',
                label: 'Period End',
                fields: {
                  'iso-date': {
                    datatype: 'column',
                    required: true
                  }
                }
              },
              'target': {
                datatype: 'compound',
                label: 'Target',
                fields: {
                  'value': {
                    datatype: 'column',
                    required: true
                  },
                  'location': {
                    datatype: 'compound',
                    label: 'Location',
                    fields: {
                      'ref': {
                        datatype: 'column',
                        required: false
                      }
                    }
                  },
                  'dimension': {
                    datatype: 'compound',
                    label: 'Dimension',
                    fields: {
                      'name': {
                        datatype: 'column',
                        required: false
                      },
                      'value': {
                        datatype: 'column',
                        required: false
                      }
                    }
                  },
                  'comment': {
                    datatype: 'compound',
                    label: 'Comment',
                    fields: {
                      'narrative': {
                        datatype: 'compound',
                        label: 'Narrative',
                        fields: {
                          'text': {
                            datatype: 'column',
                            required: false
                          }
                        }
                      }
                    }
                  }
                }
              },
              'actual': {
                datatype: 'compound',
                label: 'Actual',
                fields: {
                  'value': {
                    datatype: 'column',
                    required: true
                  },
                  'location': {
                    datatype: 'compound',
                    label: 'Location',
                    fields: {
                      'ref': {
                        datatype: 'column',
                        required: false
                      }
                    }
                  },
                  'dimension': {
                    datatype: 'compound',
                    label: 'Dimension',
                    fields: {
                      'name': {
                        datatype: 'column',
                        required: false
                      },
                      'value': {
                        datatype: 'column',
                        required: false
                      }
                    }
                  },
                  'comment': {
                    datatype: 'compound',
                    label: 'Comment',
                    fields: {
                      'narrative': {
                        datatype: 'compound',
                        label: 'Narrative',
                        fields: {
                          'text': {
                            datatype: 'column',
                            required: false
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  'legacy-data': {
    datatype: 'compound',
    label: 'Legacy Data',
    fields: {
      'name': {
        datatype: 'column',
        required: true
      },
      'value': {
        datatype: 'column',
        required: true
      },
      'iati-equivalent': {
        datatype: 'column',
        required: false
      }
    }
  },
  'crs-add': {
    datatype: 'compound',
    label: 'Crs Add',
    fields: {
      'other-flags': {
        datatype: 'compound',
        label: 'Other Flags',
        fields: {
          'code': {
            datatype: 'column',
            required: true
          },
          'significance': {
            datatype: 'column',
            required: true
          }
        }
      },
      'loan-terms': {
        datatype: 'compound',
        label: 'Loan Terms',
        fields: {
          'rate-1': {
            datatype: 'column',
            required: false
          },
          'rate-2': {
            datatype: 'column',
            required: false
          },
          'repayment-type': {
            datatype: 'compound',
            label: 'Repayment Type',
            fields: {
              'code': {
                datatype: 'column',
                required: true
              }
            }
          },
          'repayment-plan': {
            datatype: 'compound',
            label: 'Repayment Plan',
            fields: {
              'code': {
                datatype: 'column',
                required: true
              }
            }
          },
          'commitment-date': {
            datatype: 'compound',
            label: 'Commitment Date',
            fields: {
              'iso-date': {
                datatype: 'column',
                required: true
              }
            }
          },
          'repayment-first-date': {
            datatype: 'compound',
            label: 'Repayment First Date',
            fields: {
              'iso-date': {
                datatype: 'column',
                required: true
              }
            }
          },
          'repayment-final-date': {
            datatype: 'compound',
            label: 'Repayment Final Date',
            fields: {
              'iso-date': {
                datatype: 'column',
                required: true
              }
            }
          }
        }
      },
      'loan-status': {
        datatype: 'compound',
        label: 'Loan Status',
        fields: {
          'year': {
            datatype: 'column',
            required: true
          },
          'currency': {
            datatype: 'column',
            required: false
          },
          'value-date': {
            datatype: 'column',
            required: true
          },
          'interest-received': {
            datatype: 'compound',
            label: 'Interest Received',
            fields: {
              'text': {
                datatype: 'column',
                required: false
              }
            }
          },
          'principal-outstanding': {
            datatype: 'compound',
            label: 'Principal Outstanding',
            fields: {
              'text': {
                datatype: 'column',
                required: false
              }
            }
          },
          'principal-arrears': {
            datatype: 'compound',
            label: 'Principal Arrears',
            fields: {
              'text': {
                datatype: 'column',
                required: false
              }
            }
          },
          'interest-arrears': {
            datatype: 'compound',
            label: 'Interest Arrears',
            fields: {
              'text': {
                datatype: 'column',
                required: false
              }
            }
          }
        }
      },
      'channel-code': {
        datatype: 'compound',
        label: 'Channel Code',
        fields: {
          'text': {
            datatype: 'column',
            required: false
          }
        }
      }
    }
  },
  'fss': {
    datatype: 'compound',
    label: 'Fss',
    fields: {
      'extraction-date': {
        datatype: 'column',
        required: true
      },
      'priority': {
        datatype: 'column',
        required: false
      },
      'phaseout-year': {
        datatype: 'column',
        required: false
      },
      'forecast': {
        datatype: 'compound',
        label: 'Forecast',
        fields: {
          'year': {
            datatype: 'column',
            required: true
          },
          'currency': {
            datatype: 'column',
            required: false
          },
          'value-date': {
            datatype: 'column',
            required: false
          },
          'text': {
            datatype: 'column',
            required: false
          }
        }
      }
    }
  },
  'humanitarian-scope': {
    datatype: 'compound',
    label: 'Humanitarian Scope',
    fields: {
      'type': {
        datatype: 'column',
        required: true
      },
      'vocabulary': {
        datatype: 'column',
        required: true
      },
      'vocabulary-uri': {
        datatype: 'column',
        required: false
      },
      'code': {
        datatype: 'column',
        required: true
      },
      'narrative': {
        datatype: 'compound',
        label: 'Narrative',
        fields: {
          'xml:lang': {
            datatype: 'column',
            required: false
          },
          'text': {
            datatype: 'column',
            required: false
          }
        }
      }
    }
  }
};

DIMENSION_META = {
  'iati-activity': {
    fixedDataType: true,
    helpText: '<p>\n        Top-level element for a single IATI activity report.\n      </p>'
  },
  'iati-identifier': {
    fixedDataType: true,
    helpText: '<p>\n        A globally unique identifier for the activity.\n</p><p>\n        This MUST be prefixed with EITHER the current IATI\n        organisation identifier for the reporting organisation\n        (reporting-org/@ref) OR a previous identifier reported in\n        other-identifier, and suffixed with the organisation’s own\n        activity identifier. The prefix and the suffix should be\n        separated by a hyphen "-".\n</p><p>\n        Once an activity has been reported to IATI its identifier MUST\n        NOT be changed in subsequent updates.\n      </p>'
  },
  'other-identifier': {
    fixedDataType: true,
    helpText: '<p>\n        An other identifier for the activity. This may be a publishers\n        own identifier that it wishes to record with the activity.\n        This element is also used to trace changes to activity\n        identifiers, for example when and organisation has changed\n        it\'s organisation identifier.\n      </p>'
  },
  'narrative': {
    fixedDataType: true,
    helpText: '<p>\n        The free text name or description of the item being described. This can\n        be repeated in multiple languages.\n      </p>'
  },
  'activity-status': {
    fixedDataType: true,
    helpText: '<p>\n        The current status of the activity. See codelist for values.\n      </p>'
  },
  'activity-date': {
    fixedDataType: true,
    helpText: '<p>\n        The planned and actual start and completion dates of the\n        activity. Start dates may reflect either the commencement of\n        funding, planning or physical activity. End dates should,\n        wherever possible, reflect the ending of physical activity.\n        \n        The narrative content may contain text (e.g. 2011Q1) for\n        accurately recording less specific dates such as month,\n        quarter, or year.\n      </p>'
  },
  'contact-info': {
    fixedDataType: true,
    helpText: '<p>\n        Contact information for the activity.  Specify whatever is\n        available.  You may repeat this element for each contact\n        person.\n      </p>'
  },
  'participating-org': {
    fixedDataType: true,
    helpText: '<p>\n        An organisation involved with the activity. May be a donor,\n        fund, agency, etc. Specifying the @ref identifier is strongly\n        recommended. May contain the organisation name as narrative.\n</p><p>\n        If the reporting organisation plays a role in the activity it\n        should be repeated here. One organisation may play more than\n        one role (eg, funding and implementing): in such a case each\n        role should be reported and the name of the organisation\n        repeated.\n      </p>'
  },
  'activity-scope': {
    fixedDataType: true,
    helpText: '<p>\n        The geographical scope of the activity: regional, national,\n        sub-national, etc.\n      </p>'
  },
  'recipient-country': {
    fixedDataType: true,
    helpText: '<p>\n        A country that will benefit from this activity. If a specific\n        country is not known the recipient-region element should be\n        used instead. For geographical location, use the location\n        element.\n</p><p>\n        Multiple countries and regions can be reported, in which case\n        the percentage attribute MUST be used to specify the share of\n        total commitments across all reported countries and regions.\n</p><p>\n        The country can also be specified at transaction rather than\n        activity level. If recipient-country OR recipient-region are \n        reported at the transaction level, ALL transactions MUST \n        contain a recipient-country or recipient-region element and \n        iati-activity/recipient-country \n        and iati-activity/recipient-region MUST NOT be used.\n      </p>'
  },
  'recipient-region': {
    fixedDataType: true,
    helpText: '<p>\n        A supranational geopolitical region that will benefit from\n        this activity. For sub-national geographical location, use the\n        location element.\n</p><p>\n        Multiple countries and regions can be reported, in which case\n        the percentage attribute MUST be used to specify the share of\n        total commitments across all reported countries and regions.\n        Recipient-region must not be used merely to describe the\n        region of a country reported in recipient-region, but ONLY if\n        the region is a recipient IN ADDITION to the country.\n</p><p>\n        Region can also be reported at transaction rather than\n        activity level. If transaction/recipient-country AND/OR\n        transaction/recipient-region are used THEN ALL transaction\n        elements MUST contain a recipient-country and/or\n        recipient-region element AND iati-activity/recipient-region\n        and iati-activity/recipient-region MUST NOT be used AND each\n        transaction MUST only contain one recipient-country or\n        recipient-region.\n      </p>'
  },
  'location': {
    fixedDataType: true,
    helpText: '<p>\n        The sub-national geographical identification of the target\n        locations of an activity. These can be described by gazetteer\n        reference, coordinates, administrative areas or a textual\n        description. Any number of locations may be reported.\n      </p>'
  },
  'sector': {
    fixedDataType: true,
    helpText: '<p>\n        A recognised code, from a recognised vocabulary, classifying\n        the purpose of the activity. Sector MUST EITHER be reported\n        here OR at transaction level for ALL transactions\n      </p>'
  },
  'country-budget-items': {
    fixedDataType: true,
    helpText: '<p>\n        This item encodes the alignment of activities with both the\n        functional and administrative classifications used in the\n        recipient country\'s Chart of Accounts. This applies to both\n        on- and off-budget activities.\n      </p>'
  },
  'policy-marker': {
    fixedDataType: true,
    helpText: '<p>\n        A policy or theme addressed by the activity. This element was\n        designed for the reporting of OECD DAC CRS policy markers\n        (columns 20-23 and 28-31 of the CRS++ reporting format) but\n        the vocabulary attribute allows it use by other (including\n        local) systems. This element can be repeated for each policy\n        marker. \n      </p>'
  },
  'collaboration-type': {
    fixedDataType: true,
    helpText: '<p>\n        The type of collaboration involved in the activity\'s\n        disbursements, e.g. "bilateral" or "multilateral".\n      </p>'
  },
  'default-finance-type': {
    fixedDataType: true,
    helpText: '<p>\n        The type of finance (e.g. grant, loan, debt relief, etc). This\n        the default value for all transactions in the activity report;\n        it can be overridden by individual transactions.\n      </p>'
  },
  'default-flow-type': {
    fixedDataType: true,
    helpText: '<p>\n        Whether the activity is funded by Official Development\n        Assistance (ODA), Other Official Flows (OOF), etc\n      </p>'
  },
  'default-aid-type': {
    fixedDataType: true,
    helpText: '<p>\n        The type of aid being supplied (project-type intervention,\n        budget support, debt relief, etc.). This element specifies a\n        default for all the activity\'s financial transactions; it can\n        be overridden at the individual transaction level.\n      </p>'
  },
  'default-tied-status': {
    fixedDataType: true,
    helpText: '<p>\n        Whether the aid is untied, tied, or partially tied. This\n        element specifies a default for all the activity\'s financial\n        transactions; it can be overridden at the individual\n        transaction level.\n        \n        If an activity is partially tied it is recommended that tied\n        and untied commitments are reported as separate transactions\n        and that transaction/tied-status is used to classify them.\n      </p>'
  },
  'budget': {
    fixedDataType: true,
    helpText: '<p>\n        The value of the aid activity\'s budget for each financial\n        quarter or year over the lifetime of the activity. The total\n        budget for an activity should be reported as a commitment in\n        the transaction element. The purpose of this element is to\n        provide predictability for recipient planning on an annual\n        basis. The status explains whether the budget being reported \n        is indicative or has been formally committed. The value \n        should appear within the BudgetStatus codelist. If the @status \n        attribute is not present, the budget is assumed to be \n        indicative. While it is useful for the sum of budgets to match \n        the sum of commitments this is not necessarily the case, \n        depending on a publisher\'s business model and legal frameworks. \n      </p>'
  },
  'planned-disbursement': {
    fixedDataType: true,
    helpText: '<p>\n        The planned disbursement element should only be used to report\n        specific planned cash transfers. These should be reported for\n        a specific date or a meaningfully predictable period. These\n        transactions should be reported in addition to budgets - which\n        are typically annual breakdowns of the total activity\n        commitment.\n      </p>'
  },
  'capital-spend': {
    fixedDataType: true,
    helpText: '<p>\n        The percentage of the total commitment that is for capital\n        spending\n      </p>'
  },
  'transaction': {
    fixedDataType: true,
    helpText: '<p>\n        Transactions recording committed or actual funds flowing in or\n        out of an aid activity.\n      </p>'
  },
  'document-link': {
    fixedDataType: true,
    helpText: '<p>\n        A  link to an online, publicly accessible web page or\n        document.\n      </p>'
  },
  'related-activity': {
    fixedDataType: true,
    helpText: '<p>\n        Another separately reported IATI activity that is related to\n        this one. The \'type\' attribute describes the type of\n        relationship: eg. parent, child, multifunded ... \n      </p>'
  },
  'conditions': {
    fixedDataType: true,
    helpText: '<p>\n        Specific terms and conditions attached to the activity that,\n        if not met, may influence the delivery of commitments made by\n        participating organisations.\n      </p>'
  },
  'result': {
    fixedDataType: true,
    helpText: '<p>\n        A container for reporting outputs, outcomes, impacts and other\n        results that stem directly from the activity. This may be\n        repeated for each type of result reported.\n      </p>'
  },
  'legacy-data': {
    fixedDataType: true,
    helpText: '<p>\n        The legacy data element allows for the reporting of values\n        held in a field in the reporting organisation\'s system which\n        is similar, but not identical to an IATI element.\n      </p>'
  },
  'crs-add': {
    fixedDataType: true,
    helpText: '<p>\n        Additional items specific to CRS++ reporting.\n      </p>'
  },
  'fss': {
    fixedDataType: true,
    helpText: '<p>\n        This section allows entry of data required for the OECD\n        DAC Forward Spending Survey at an activity level.\n      </p>'
  },
  'humanitarian-scope': {
    fixedDataType: true,
    helpText: '<p>\n        Classification of emergencies, appeals and other humanitarian \n        events and actions.\n      </p>'
  }
};

SAMPLE_DATA = {
  "Project ID": "AGNA64",
  "Title Project": "WE CAN end violence against women in Afghanistan",
  "Short Descr Project": "The project is part of PIP P00115 which is the South Asia regional “We Can end violence against women campaign”. The objective is to challenge and change the patriarchal idea, beliefs, attitude, behaviour and practice that perpetuate violence against women. Project will take numbers of initiatives, which ultimately contribute to breaking the silence of domestic violence, which has huge prevalence all over the Afghan society. Under this project numbers of campaign initiatives will be taken to mobilise 2000 change makers and to make them aware about the issue and bring positive change in their personal attitudes, behaviours and practices.",
  "Project Starts": "1-May-07",
  "Project Ends": "31-Mar-11",
  "Level of Impact": "Country",
  "ISO CODE": "AF",
  "Loc of Impact": "Afghanistan",
  "Loc Info": " Kabul ",
  "% Aim 1: Right to Sustainable Livelihoods": "-0",
  "% Aim 2: Right to Essential services": "-0",
  "% Aim 3: Right to Life and Security": "-0",
  "% Aim 4: Right to be heard": "10",
  "% Aim 5: Right to Equity": "90",
  " Expenditure prior to 2010/11": " 95,018 ",
  "Expenditure in 2010/11": " 40,415 ",
  " Revised Budget  in current and future years (£) ": "-0",
  "Total Value all years (£)": " 135,433 "
};

DEFAULT_MODEL = {
  organisation: {},
  mapping: {
    'iati-identifier': {},
    'title': {},
    'description': {},
    'activity-status': {},
    'activity-date-start': {
      datatype: 'compound',
      label: 'Activity Start Date',
      'iati-field': 'activity-date',
      fields: {
        'type': {
          'constant': 'start-planned',
          'datatype': 'constant'
        },
        'iso-date': {},
        'text': {}
      }
    },
    'activity-date-end': {
      datatype: 'compound',
      label: 'Activity End Date',
      'iati-field': 'activity-date',
      fields: {
        'type': {
          'constant': 'end-planned',
          'datatype': 'constant'
        },
        'iso-date': {},
        'text': {}
      }
    },
    'recipient-country': {},
    'recipient-region': {},
    'funding-organisation': {
      datatype: 'compound',
      'iati-field': 'participating-org',
      label: 'Funding Organisation',
      fields: {
        'role': {
          'constant': 'Funding',
          'datatype': 'constant'
        },
        'text': {},
        'ref': {},
        'type': {}
      }
    },
    'extending-organisation': {
      datatype: 'compound',
      'iati-field': 'participating-org',
      label: 'Extending Organisation',
      fields: {
        'role': {
          'constant': 'Extending',
          'datatype': 'constant'
        },
        'text': {},
        'ref': {},
        'type': {}
      }
    },
    'implementing-organisation': {
      datatype: 'compound',
      'iati-field': 'participating-org',
      label: 'Implementing Organisation',
      fields: {
        'role': {
          'constant': 'Implementing',
          'datatype': 'constant'
        },
        'text': {},
        'ref': {},
        'type': {}
      }
    },
    sector: {},
    transaction: {}
  }
};

ref = DEFAULT_MODEL.mapping;
for (key in ref) {
  value = ref[key];
  if ($.isEmptyObject(value)) {
    $.extend(value, DEFAULT_FIELD_SETUP[key]);
    value['iati-field'] = key;
  }
}

FIELDS_META = {
  label: {
    required: true
  }
};

String.prototype.dasherize = function() {
  return this.replace(/_/g, "-");
};

util = {
  flattenObject: function(obj) {
    var flat, pathStr, walk;
    flat = {};
    pathStr = function(path) {
      var ary, p;
      ary = [path[0]];
      ary = ary.concat((function() {
        var i, len, ref1, results;
        ref1 = path.slice(1);
        results = [];
        for (i = 0, len = ref1.length; i < len; i++) {
          p = ref1[i];
          results.push("[" + p + "]");
        }
        return results;
      })());
      return ary.join('');
    };
    walk = function(path, o) {
      var newpath, results;
      results = [];
      for (key in o) {
        value = o[key];
        newpath = $.extend([], path);
        newpath.push(key);
        if ($.type(value) === 'object') {
          results.push(walk(newpath, value));
        } else {
          if ($.type(value) === 'array') {
            newpath.push('');
          }
          results.push(flat[pathStr(newpath)] = value);
        }
      }
      return results;
    };
    walk([], obj);
    return flat;
  }
};

Widget = (function(superClass) {
  extend(Widget, superClass);

  function Widget() {
    return Widget.__super__.constructor.apply(this, arguments);
  }

  Widget.prototype.deserialize = function(data) {};

  return Widget;

})(Delegator);

UniqueKeyWidget = (function(superClass) {
  extend(UniqueKeyWidget, superClass);

  function UniqueKeyWidget() {
    return UniqueKeyWidget.__super__.constructor.apply(this, arguments);
  }

  UniqueKeyWidget.prototype.events = {
    'span click': 'onKeyClick'
  };

  UniqueKeyWidget.prototype.deserialize = function(data) {
    var availableKeys, fk, fv, k, ref1, ref2, ref3, uniq, v;
    uniq = ((ref1 = data['dataset']) != null ? ref1['unique_keys'] : void 0) || [];
    availableKeys = [];
    ref2 = data['mapping'];
    for (k in ref2) {
      v = ref2[k];
      if (v['datatype'] !== 'value') {
        ref3 = v['fields'];
        for (fk in ref3) {
          fv = ref3[fk];
          availableKeys.push(k + "." + fk);
        }
      } else {
        availableKeys.push(k);
      }
    }
    this.keys = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = availableKeys.length; i < len; i++) {
        k = availableKeys[i];
        results.push({
          'name': k,
          'used': indexOf.call(uniq, k) >= 0
        });
      }
      return results;
    })();
    return this.render();
  };

  UniqueKeyWidget.prototype.promptAddDimensionNamed = function(props, thename) {
    return false;
  };

  UniqueKeyWidget.prototype.render = function() {
    return this.element.html($.tmpl('tpl_unique_keys', {
      'keys': this.keys
    }));
  };

  UniqueKeyWidget.prototype.onKeyClick = function(e) {
    var idx;
    idx = this.element.find('span').index(e.currentTarget);
    this.keys[idx]['used'] = !this.keys[idx]['used'];
    this.render();
    return this.element.parents('form').first().change();
  };

  return UniqueKeyWidget;

})(Widget);

DimensionWidget = (function(superClass) {
  extend(DimensionWidget, superClass);

  DimensionWidget.prototype.events = {
    '.add_field change': 'onAddFieldClick',
    '.field_add_alternative click': 'onAddAlternativeClick',
    '.field_add_transform click': 'onAddTransformClick',
    '.field_remove_transform click': 'onRemoveTransformClick',
    '.field_switch_constant change': 'onFieldSwitchConstantClick',
    '.field_switch_column change': 'onFieldSwitchColumnClick',
    '.field_rm click': 'onFieldRemoveClick',
    '.delete_dimension click': 'onDeleteDimensionClick',
    '.delete_tdatafield click': 'onDeleteTDataFieldClick',
    '.column change': 'onColumnChange',
    '.show_advanced click': 'onShowAdvanced'
  };

  function DimensionWidget(name, container, options) {
    this.formFieldRequired2 = bind(this.formFieldRequired2, this);
    this.formFieldRequired = bind(this.formFieldRequired, this);
    this.formFieldPrefix = bind(this.formFieldPrefix, this);
    var el;
    this.name = name;
    el = $("<fieldset class='dimension' data-dimension-name='" + this.name + "'> </fieldset>").appendTo(container);
    DimensionWidget.__super__.constructor.call(this, el, options);
    this.id = (this.element.parents('.modeleditor').attr('id')) + "_dim_" + this.name;
    this.element.attr('id', this.id);
  }

  DimensionWidget.prototype.deserialize = function(data) {
    var formObj, k, ref1, ref2, ref3, results, v;
    this.data = ((ref1 = data['mapping']) != null ? ref1[this.name] : void 0) || {};
    this.iati_field = ((ref2 = data['mapping']) != null ? ref2[this.name]['iati-field'] : void 0) || '';
    this.meta = DIMENSION_META[this.iati_field] || {};
    this.default_fields = (DEFAULT_FIELD_SETUP != null ? DEFAULT_FIELD_SETUP[this.iati_field] : void 0) || {};
    if (this.data.datatype !== 'value' && !('fields' in this.data)) {
      this.data.fields = {
        'label': {
          'datatype': 'string'
        }
      };
    }
    this.element.html($.tmpl('tpl_dimension', this));
    this.element.trigger('fillColumnsRequest', [this.element.find('select.column')]);
    formObj = {
      'mapping': {}
    };
    formObj['mapping'][this.name] = this.data;
    ref3 = util.flattenObject(formObj);
    results = [];
    for (k in ref3) {
      v = ref3[k];
      results.push(this.element.find("[name=\"" + k + "\"]").val(v));
    }
    return results;
  };

  DimensionWidget.prototype.formFieldPrefix = function() {
    return "mapping[" + this.name + "][fields]";
  };

  DimensionWidget.prototype.formFieldRequired = function(fieldName, fieldParent) {
    var ref1;
    if (fieldParent) {
      return ((ref1 = FIELDS_META[fieldName]) != null ? ref1['required'] : void 0) || false;
    } else {
      return false;
    }
  };

  DimensionWidget.prototype.formFieldRequired2 = function(fieldName, fieldParent, transactionField) {
    var ref1, ref2;
    if (fieldParent) {
      if (DEFAULT_FIELD_SETUP[fieldParent]) {
        if (DEFAULT_FIELD_SETUP[fieldParent]['fields'] && DEFAULT_FIELD_SETUP[fieldParent]['fields'][fieldName]) {
          return ((ref1 = DEFAULT_FIELD_SETUP[fieldParent]['fields'][fieldName]) != null ? ref1['required'] : void 0) || false;
        } else {
          return false;
        }
      } else {
        return false;
      }
    } else {
      return ((ref2 = FIELDS_META[fieldName]) != null ? ref2['required'] : void 0) || false;
    }
  };

  DimensionWidget.prototype.onAddFieldClick = function(e) {
    var curRow, default_fields_fields, error, name, row;
    name = e.currentTarget.value;
    curRow = $(e.currentTarget).parents('tr').first();
    try {
      default_fields_fields = eval('this.default_fields' + curRow.attr('data-prefix').replace('mapping[' + this.name + ']', '').replace(/\[/g, '["').replace(/\]/g, '"]'));
    } catch (_error) {
      error = _error;
      default_fields_fields = {};
    }
    if (name === '') {
      return false;
    } else if (name === 'customnested') {
      return this.onAddNestedElClick(e);
    } else if (name === 'custom') {
      name = prompt("Field name:").trim();
    } else if (name in default_fields_fields && default_fields_fields[name].datatype === 'compound') {
      return this.onAddNestedElClick(e);
    }
    row = this._makeFieldRow(name, curRow.data('prefix'), curRow.data('level'));
    row.insertBefore(curRow);
    this.element.trigger('fillColumnsRequest', [row.find('select.column')]);
    return false;
  };

  DimensionWidget.prototype.onAddNestedElClick = function(e) {
    var curRow, data, default_fields_fields, error, level, name, prefix, row;
    curRow = $(e.currentTarget).parents('tr').first();
    name = e.currentTarget.value;
    if (name === 'customnested') {
      name = prompt("Element name:").trim();
    }
    prefix = curRow.data('prefix');
    level = curRow.data('level');
    data = {
      'fields': {}
    };
    try {
      default_fields_fields = eval('this.default_fields' + curRow.attr('data-prefix').replace('mapping[' + this.name + ']', '').replace(/\[/g, '["').replace(/\]/g, '"]'));
    } catch (_error) {
      error = _error;
      default_fields_fields = {};
    }
    if (name in default_fields_fields) {
      data['fields'][name] = default_fields_fields[name];
    } else {
      data['fields'][name] = {
        'datatype': 'compound',
        'label': name,
        'iati_field': name,
        'fields': {}
      };
    }
    row = $.tmpl('tpl_table_recursive', {
      'data': data,
      'dimensionName': '',
      'prefix2': '',
      'iati_field': '',
      'prefix': prefix,
      'level': level,
      'formFieldRequired2': this.formFieldRequired2,
      'default_fields': this.default_fields
    });
    row.insertBefore(curRow);
    this.element.parents('form').first().change();
    return false;
  };

  DimensionWidget.prototype.onDeleteDimensionClick = function(e) {
    var theform;
    theform = this.element.parents('form').first();
    $(e.currentTarget).parents('fieldset').first().remove();
    theform.change();
    return false;
  };

  DimensionWidget.prototype.onDeleteTDataFieldClick = function(e) {
    var theform;
    theform = this.element.parents('form').first();
    $(e.currentTarget).parents('fieldset').first().remove();
    theform.change();
    return false;
  };

  DimensionWidget.prototype.onColumnChange = function(e) {
    var construct_iatifield, curDimension, dimension_data, dimension_name, thiscolumn;
    curDimension = $(e.currentTarget).parents('fieldset').first();
    dimension_name = curDimension.data('dimension-name');
    dimension_data = curDimension.serializeObject()['mapping'];
    thiscolumn = $(e.currentTarget).val();
    construct_iatifield = this.doIATIFieldSample(dimension_name, dimension_data, thiscolumn);
    curDimension.find('span').first().html('Sample data: <code></code>');
    curDimension.find('span code').first().text(construct_iatifield);
    this.element.parents('form').first().change();
    return false;
  };

  DimensionWidget.prototype.doIATIFieldSample = function(dimension_name, dimension_data, thiscolumn) {
    var construct_iatifield, k, ref1, samplevalue, textdata, v;
    construct_iatifield = '<' + dimension_data[dimension_name]['iati-field'];
    ref1 = dimension_data[dimension_name]['fields'];
    for (k in ref1) {
      v = ref1[k];
      if (k === 'text') {
        if (v['datatype'] === 'constant') {
          textdata = dimension_data[dimension_name]['fields'][k]['constant'];
        } else {
          textdata = this.dataSample(dimension_data[dimension_name]['fields'][k]['column']);
        }
      } else {
        if (v['datatype'] === 'constant') {
          samplevalue = dimension_data[dimension_name]['fields'][k]['constant'];
        } else {
          samplevalue = this.dataSample(dimension_data[dimension_name]['fields'][k]['column']);
        }
        construct_iatifield = construct_iatifield + ' ' + k + '="' + samplevalue + '"';
      }
    }
    if (textdata) {
      construct_iatifield = construct_iatifield + ">" + textdata + "</" + dimension_data[dimension_name]['iati-field'] + ">";
    } else {
      construct_iatifield = construct_iatifield + "/>";
    }
    return construct_iatifield;
  };

  DimensionWidget.prototype.onFieldRemoveClick = function(e) {
    var curRow, prefix;
    curRow = $(e.currentTarget).parents('tr').first();
    prefix = curRow.attr('data-prefix') + '[' + curRow.attr('data-field-name') + ']';
    $(e.currentTarget).parents('tbody').first().children('[data-prefix^="' + prefix + '"]').remove();
    $(e.currentTarget).parents('tbody').first().children('[name^="' + prefix + '"]').remove();
    curRow.next('.alternativesCounter').remove();
    curRow.remove();
    this.element.parents('form').first().change();
    return false;
  };

  DimensionWidget.prototype.onAddAlternativeClick = function(e) {
    var alternativesCounter, curRow, fieldName, prefix;
    curRow = $(e.currentTarget).parents('tr').first();
    prefix = this.formFieldPrefix();
    fieldName = curRow.data('field-name');
    alternativesCounter = curRow.data('alternatives-counter');
    alternativesCounter += 1;
    curRow.next('.alternativesCounter').first().val(alternativesCounter);
    curRow.after("<tr><td><input name=\"" + prefix + "[" + fieldName + "][alternatives][" + alternativesCounter + "]\" value=\"test\" /></td></tr>");
    this.element.parents('form').first().change();
    return false;
  };

  DimensionWidget.prototype.onAddTransformClick = function(e) {
    var curRow, fieldName, prefix;
    curRow = $(e.currentTarget).parents('tr').first();
    prefix = curRow.data('prefix');
    fieldName = curRow.data('field-name');
    curRow.after("<tr><td><input name=\"" + prefix + "[" + fieldName + "][text-transform-type]\" value=\"\" /></td></tr>");
    this.element.parents('form').first().change();
    return false;
  };

  DimensionWidget.prototype.onRemoveTransformClick = function(e) {
    var curRow;
    curRow = $(e.currentTarget).parents('tr').first();
    curRow.find('.transform').remove();
    this.element.parents('form').first().change();
    return false;
  };

  DimensionWidget.prototype.onFieldSwitchConstantClick = function(e) {
    var curDimension, curRow, iatiField, row;
    curRow = $(e.currentTarget).parents('tr').first();
    curDimension = $(e.currentTarget).parents('fieldset').first();
    iatiField = $(e.currentTarget).parents('fieldset').first().find('.iatifield').val();
    row = this._makeFieldRow(curRow.data('field-name'), curRow.data('prefix'), curRow.data('level'), curDimension.data('dimension-name'), iatiField, true);
    curRow.replaceWith(row);
    this.element.parents('form').first().change();
    return false;
  };

  DimensionWidget.prototype.onFieldSwitchColumnClick = function(e) {
    var curDimension, curRow, iatiField, row;
    curRow = $(e.currentTarget).parents('tr').first();
    curDimension = $(e.currentTarget).parents('fieldset').first();
    iatiField = $(e.currentTarget).parents('fieldset').first().find('.iatifield').val();
    row = this._makeFieldRow(curRow.data('field-name'), curRow.data('prefix'), curRow.data('level'), curDimension.data('dimension-name'), iatiField, false);
    curRow.replaceWith(row);
    this.element.trigger('fillColumnsRequest', [row.find('select.column')]);
    this.element.parents('form').first().change();
    return false;
  };

  DimensionWidget.prototype.onShowAdvanced = function(e) {
    var curRow;
    curRow = $(e.currentTarget).parents('tr').first();
    curRow.find('.advanced').toggle();
    return false;
  };

  DimensionWidget.prototype.promptAddDimensionNamed = function(props, thename) {
    return false;
  };

  DimensionWidget.prototype.dataSample = function(columnName) {
    return SAMPLE_DATA[columnName];
  };

  DimensionWidget.prototype._makeFieldRow = function(name, prefix, level, dimensionName, iatiField, constant) {
    var tplName;
    if (constant == null) {
      constant = false;
    }
    tplName = constant ? 'tpl_dimension_field_const' : 'tpl_dimension_field';
    return $.tmpl(tplName, {
      'fieldName': name,
      'dimensionName': dimensionName,
      'iatiField': iatiField,
      'prefix': prefix,
      'level': level,
      'required': this.formFieldRequired,
      field: {}
    });
  };

  DimensionWidget.prototype._makeFieldRowUpdate = function(name, thisfield, requiredvar, constant) {
    var tplName;
    if (constant == null) {
      constant = false;
    }
    tplName = constant ? 'tpl_dimension_field_const' : 'tpl_dimension_field';
    return $.tmpl(tplName, {
      'fieldName': name,
      'prefix': this.formFieldPrefix,
      'required': this.formFieldRequired2
    });
  };

  return DimensionWidget;

})(Widget);

DimensionsWidget = (function(superClass) {
  extend(DimensionsWidget, superClass);

  DimensionsWidget.prototype.events = {
    '.iati_field_add change': 'onAddIATIFieldClick',
    '.add_value_dimension click': 'onAddValueDimensionClick',
    '.add_compound_dimension click': 'onAddCompoundDimensionClick',
    '.copy_dimension click': 'onCopyDimensionClick'
  };

  function DimensionsWidget(element, options) {
    DimensionsWidget.__super__.constructor.apply(this, arguments);
    this.widgets = [];
    this.dimsEl = this.element.find('.dimensions').get(0);
    this.element.trigger('doFieldSelectors', 'iatifield');
    this.element.trigger('doFieldSelectors', 'column');
  }

  DimensionsWidget.prototype.addDimension = function(name) {
    var w;
    w = new DimensionWidget(name, this.dimsEl);
    this.widgets.push(w);
    return w;
  };

  DimensionsWidget.prototype.removeDimension = function(name) {
    var i, idx, len, ref1, w;
    idx = null;
    ref1 = this.widgets;
    for (i = 0, len = ref1.length; i < len; i++) {
      w = ref1[i];
      if (w.name === name) {
        idx = this.widgets.indexOf(w);
        break;
      }
    }
    if (idx !== null) {
      return this.widgets.splice(idx, 1)[0].element.remove();
    }
  };

  DimensionsWidget.prototype.deserialize = function(data) {
    var dims, i, j, len, len1, name, obj, ref1, toRemove, widget;
    if (this.ignoreParent) {
      return;
    }
    dims = data['mapping'] || {};
    toRemove = [];
    ref1 = this.widgets;
    for (i = 0, len = ref1.length; i < len; i++) {
      widget = ref1[i];
      if (widget.name in dims) {
        widget.deserialize(data);
        delete dims[widget.name];
      } else {
        toRemove.push(widget.name);
      }
    }
    for (j = 0, len1 = toRemove.length; j < len1; j++) {
      name = toRemove[j];
      this.removeDimension(name);
    }
    for (name in dims) {
      obj = dims[name];
      if (obj['datatype'] !== 'column') {
        this.addDimension(name).deserialize(data);
      }
    }
    return this.element.trigger('fillIATIfieldsRequest', [$(document).find('select.iati_field_add')]);
  };

  DimensionsWidget.prototype.createName = function(name) {
    var names;
    names = this.widgets.map(function(x) {
      return x.name;
    });
    while (true) {
      if (indexOf.call(names, name) >= 0) {
        name += '~';
      } else {
        return name;
      }
    }
  };

  DimensionsWidget.prototype.onCopyDimensionClick = function(e) {
    var data, fieldset, i, len, name, ref1, widget;
    fieldset = $(e.currentTarget).parents('fieldset').first();
    name = prompt("Give a unique name for your copy of this dimension (letters and numbers, no spaces):");
    data = {
      'mapping': {}
    };
    data['mapping'][name] = {};
    ref1 = this.widgets;
    for (i = 0, len = ref1.length; i < len; i++) {
      widget = ref1[i];
      if (widget.name === fieldset.data('dimension-name')) {
        data['mapping'][name] = widget.data;
        break;
      }
    }
    data['mapping'][name]['label'] = name;
    this.addDimension(name.trim()).deserialize(data);
    return false;
  };

  DimensionsWidget.prototype.promptAddDimension = function(props) {
    var data, iati_field, name, w;
    name = prompt("Give a unique name for your new dimension (letters and numbers, no spaces):", this.createName(props['iati-field']));
    if (!name) {
      return false;
    }
    data = {
      'mapping': {}
    };
    data['mapping'][name] = props;
    iati_field = data['mapping'][name]['iati-field'];
    data['mapping'][name] = DEFAULT_FIELD_SETUP[iati_field];
    data['mapping'][name]['label'] = name;
    data['mapping'][name]['iati-field'] = iati_field;
    w = this.addDimension(name.trim());
    w.deserialize(data);
    return w.element.get(0).scrollIntoView();
  };

  DimensionsWidget.prototype.promptAddDimensionNamed = function(thename, props) {
    var data, name;
    alert("Column \"" + thename + "\" has been added.");
    name = thename;
    if (!name) {
      return false;
    }
    data = {
      'mapping': {}
    };
    data['mapping'][name] = props;
    return this.addDimension(name.trim()).deserialize(data);
  };

  DimensionsWidget.prototype.onAddValueDimensionClick = function(e) {
    this.promptAddDimension({
      'datatype': 'value'
    });
    return false;
  };

  DimensionsWidget.prototype.onAddCompoundDimensionClick = function(e) {
    this.promptAddDimension({
      'datatype': 'compound'
    });
    return false;
  };

  DimensionsWidget.prototype.onAddIATIFieldClick = function(e) {
    var thefield;
    thefield = $(e.currentTarget).val();
    this.promptAddDimension({
      'datatype': 'compound',
      'iati-field': thefield
    });
    $(e.currentTarget).val('');
    return false;
  };

  return DimensionsWidget;

})(Delegator);

ModelEditor = (function(superClass) {
  extend(ModelEditor, superClass);

  ModelEditor.prototype.widgetTypes = {
    '.unique_keys_widget': UniqueKeyWidget,
    '.dimensions_widget': DimensionsWidget
  };

  ModelEditor.prototype.events = {
    'multipleSectorsRequest': 'onMultipleSectorsSetup',
    'modelChange': 'onModelChange',
    'fillColumnsRequest': 'onFillColumnsRequest',
    'fillIATIfieldsRequest': 'onFillIATIfieldsRequest',
    '.steps > ul > li click': 'onStepClick',
    '.steps > ul > li > ul > li click': 'onStepDimensionClick',
    '.forms form submit': 'onFormSubmit',
    '.forms form change': 'onFormChange',
    '#showdebug click': 'onShowDebugClick',
    '#hidedebug click': 'onHideDebugClick',
    '.add_data_field click': 'onAddDataFieldClick',
    'doFieldSelectors': 'onDoFieldSelectors',
    '#iatifields .availablebtn click': 'onIATIFieldsAvailableClick',
    '#iatifields .allbtn click': 'onIATIFieldsAllClick'
  };

  function ModelEditor(element, options) {
    var common_multiples, ctor, e, i, len, model_data, other_multiples, ref1, ref2, selector, x;
    ModelEditor.__super__.constructor.apply(this, arguments);
    common_multiples = ['transaction', 'sector', 'recipient-country', 'recipient-region'];
    other_multiples = (function() {
      var i, len, ref1, results;
      ref1 = this.options.iatifields;
      results = [];
      for (i = 0, len = ref1.length; i < len; i++) {
        x = ref1[i];
        if (!(indexOf.call(common_multiples, x) >= 0)) {
          results.push(x);
        }
      }
      return results;
    }).call(this);
    $('#multiple_rows_selector').html('Common choices:<br/>' + ((function() {
      var i, len, results;
      results = [];
      for (i = 0, len = common_multiples.length; i < len; i++) {
        x = common_multiples[i];
        results.push("<input type='checkbox' name='organisation[data-structure][multiple][]' value='" + x + "'/> Multiple " + x + " rows per activity<br/>");
      }
      return results;
    })()).join('\n') + 'Other:<br/>' + ((function() {
      var i, len, results;
      results = [];
      for (i = 0, len = other_multiples.length; i < len; i++) {
        x = other_multiples[i];
        if (x !== '') {
          results.push("<input type='checkbox' name='organisation[data-structure][multiple][]' value='" + x + "'/> Multiple " + x + " rows per activity<br/>");
        }
      }
      return results;
    })()).join('\n'));
    if (this.options.model_data) {
      model_data = JSON.parse(this.options.model_data);
    } else {
      model_data = DEFAULT_MODEL;
    }
    this.data = $.extend(true, {}, model_data);
    this.widgets = [];
    this.form = $(element).find('.forms form').eq(0);
    this.id = this.element.attr('id');
    if (this.id == null) {
      this.id = Math.floor(Math.random() * 0xffffffff).toString(16);
      this.element.attr('id', this.id);
    }
    this.element.find('script[type="text/x-jquery-tmpl"]').each(function() {
      return $(this).template($(this).attr('id'));
    });
    ref1 = this.widgetTypes;
    for (selector in ref1) {
      ctor = ref1[selector];
      ref2 = this.element.find(selector).get();
      for (i = 0, len = ref2.length; i < len; i++) {
        e = ref2[i];
        this.widgets.push(new ctor(e));
      }
    }
    this.element.trigger('modelChange');
    this.setStep(0);
  }

  ModelEditor.prototype.setStep = function(s) {
    $(this.element).find('.steps > ul > li').removeClass('active').eq(s).addClass('active');
    return $(this.element).find('.forms div.formpart').hide().eq(s).show();
  };

  ModelEditor.prototype.onStepClick = function(e) {
    var idx;
    idx = this.element.find('.steps > ul > li').index(e.currentTarget);
    this.setStep(idx);
    return false;
  };

  ModelEditor.prototype.onAddDataFieldClick = function(e) {
    var i, len, ref1, thevar, w;
    thevar = $(e.currentTarget).text();
    ref1 = this.widgets;
    for (i = 0, len = ref1.length; i < len; i++) {
      w = ref1[i];
      w.promptAddDimensionNamed(thevar, {
        'datatype': 'value',
        'column': thevar,
        'label': thevar
      });
    }
    this.data = this.form.serializeObject();
    this.element.trigger('modelChange');
    return $(e.currentTarget).removeClass('add_data_field available').addClass('unavailable');
  };

  ModelEditor.prototype.onShowDebugClick = function(e) {
    $('#model_data').show();
    $(document).keydown(function(event) {
      if (event.which === 27) {
        return $('#model_data').hide();
      }
    });
    return false;
  };

  ModelEditor.prototype.onHideDebugClick = function(e) {
    $('#model_data').hide();
    return false;
  };

  ModelEditor.prototype.onFormChange = function(e) {
    if (this.ignoreFormChange) {
      return;
    }
    this.data = this.form.serializeObject();
    this.element.trigger('doFieldSelectors', 'iatifield');
    this.element.trigger('doFieldSelectors', 'column');
    this.ignoreFormChange = true;
    this.element.trigger('modelChange');
    return this.ignoreFormChange = false;
  };

  ModelEditor.prototype.onDoFieldSelectors = function(e) {
    var used;
    key = e + 's_used';
    this.options[key] = [];
    used = this.options[key];
    this.form.find('.' + e).each(function() {
      var iatiname;
      iatiname = $(this).val();
      if (indexOf.call(used, iatiname) < 0) {
        return used.push(iatiname);
      }
    });
    return used.sort();
  };

  ModelEditor.prototype.onFormSubmit = function(e) {
    var api_address, csv_file, model_file;
    e.preventDefault();
    api_address = 'api_convert';
    model_file = $('#convert_model_file_URL').val();
    csv_file = $('#convert_csv_file_URL').val();
    $.post(api_address, {
      csv_file: csv_file,
      model_file: model_file
    }, {
      complete: function(result) {
        return alert(result.status);
      }
    }, "json");
    return false;
  };

  ModelEditor.prototype.onModelChange = function() {
    var dimNames, i, k, len, n, ref1, ref2, v, w;
    this.onFillColumnsRequest($('#hierarchy_select'));
    ref1 = util.flattenObject(this.data);
    for (k in ref1) {
      v = ref1[k];
      if (k !== "organisation[data-encoding]") {
        this.form.find("[name=\"" + k + "\"]").val(v);
      }
    }
    ref2 = this.widgets;
    for (i = 0, len = ref2.length; i < len; i++) {
      w = ref2[i];
      w.deserialize($.extend(true, {}, this.data));
    }
    dimNames = (function() {
      var ref3, results;
      ref3 = this.data['mapping'];
      results = [];
      for (k in ref3) {
        v = ref3[k];
        results.push(k);
      }
      return results;
    }).call(this);
    this.element.find('.steps ul.steps_dimensions').html(((function() {
      var j, len1, results;
      results = [];
      for (j = 0, len1 = dimNames.length; j < len1; j++) {
        n = dimNames[j];
        results.push('<li><a href="#' + ("m1_dim_" + n) + '">' + (this.data['mapping'][n]['label'] + "</a>"));
      }
      return results;
    }).call(this)).join('\n'));
    return $('#debug').text(JSON.stringify(this.data, null, 2));
  };

  ModelEditor.prototype.onFillColumnsRequest = function(elem) {
    var options, x;
    options = ["<option></option>", "<option disabled>Unused columns:</option>"];
    options = options.concat((function() {
      var i, len, ref1, results;
      ref1 = this.options.columns;
      results = [];
      for (i = 0, len = ref1.length; i < len; i++) {
        x = ref1[i];
        if (indexOf.call(this.options.columns_used, x) < 0 && x !== '') {
          results.push("<option value='" + x + "'>" + x + "</option>");
        }
      }
      return results;
    }).call(this));
    options.push('<option disabled>Previously used columns:</option>');
    options = options.concat((function() {
      var i, len, ref1, results;
      ref1 = this.options.columns_used;
      results = [];
      for (i = 0, len = ref1.length; i < len; i++) {
        x = ref1[i];
        if (x !== '') {
          results.push("<option value='" + x + "'>" + x + "</option>");
        }
      }
      return results;
    }).call(this));
    return $(elem).html(options.join('\n'));
  };

  ModelEditor.prototype.onFillIATIfieldsRequest = function(elem) {
    var options, x;
    options = ["<option>Add a new element</option>", "<option disabled>Unused elements:</option>"];
    options = options.concat((function() {
      var i, len, ref1, results;
      ref1 = this.options.iatifields;
      results = [];
      for (i = 0, len = ref1.length; i < len; i++) {
        x = ref1[i];
        if (indexOf.call(this.options.iatifields_used, x) < 0 && x !== '') {
          results.push("<option value='" + x + "'>" + x + "</option>");
        }
      }
      return results;
    }).call(this));
    options.push('<option disabled>Previously used elements:</option>');
    options = options.concat((function() {
      var i, len, ref1, results;
      ref1 = this.options.iatifields_used;
      results = [];
      for (i = 0, len = ref1.length; i < len; i++) {
        x = ref1[i];
        if (x !== '') {
          results.push("<option value='" + x + "'>" + x + "</option>");
        }
      }
      return results;
    }).call(this));
    return $(elem).html(options.join('\n'));
  };

  return ModelEditor;

})(Delegator);

$.plugin('modelEditor', ModelEditor);

this.ModelEditor = ModelEditor;
